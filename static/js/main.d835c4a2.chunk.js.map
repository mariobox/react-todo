{"version":3,"sources":["ToDo.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDo","checkboxes","document","getElementsByTagName","i","length","type","checked","_this","this","react_default","a","createElement","className","name","props","task","value","onChange","event","onTaskComplete","onLoad","unCheck","bind","Component","ToDoList","tasks","map","index","src_ToDo","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newTodo","setState","target","preventDefault","concat","toConsumableArray","getElementsByName","indexOf","splice","_this2","href","onSubmit","handleNewTodo","onHandleChange","autoFocus","src_ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAoCeA,0LA5BX,IADA,IAAIC,EAAaC,SAASC,qBAAqB,SACtCC,EAAE,EAAGA,EAAEH,EAAWI,OAAQD,IACN,aAAvBH,EAAWG,GAAGE,OAClBL,EAAWG,GAAGG,SAAU,oCAKnB,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SACEN,KAAK,WACLQ,KAAML,KAAKM,MAAMC,KACjBH,UAAU,mBACVI,MAAOR,KAAKM,MAAMC,KAClBE,SAAU,SAACC,GAAD,OAAWX,EAAKO,MAAMK,eAAeD,IAC/CE,OAAQZ,KAAKa,QAAQC,KAAKd,KAAlBA,KAEVC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,oBAAoBJ,KAAKM,MAAMC,gBAxBzCQ,cCWJC,mLATJ,IAAAjB,EAAAC,KACP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,KAAKM,MAAMW,MAAMC,IAAI,SAACX,EAAMY,GAAP,OAAiBlB,EAAAC,EAAAC,cAACiB,EAAD,CAAMb,KAAMA,EAAMc,IAAKF,EAAOR,eAAgBZ,EAAKO,MAAMK,2BAJnFI,aCgERO,cAjEb,SAAAA,IAAc,IAAAvB,EAAA,OAAAwB,OAAAC,EAAA,EAAAD,CAAAvB,KAAAsB,IACZvB,EAAAwB,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3B,QACK4B,MAAQ,CACXC,QAAS,GACTZ,MAAO,IAJGlB,8EAQCW,GACbV,KAAK8B,SAAS,CACZD,QAAUnB,EAAMqB,OAAOvB,8CAIbE,GACZA,EAAMsB,iBACNhC,KAAK8B,SAAS,CACZb,MAAK,GAAAgB,OAAAV,OAAAW,EAAA,EAAAX,CAAMvB,KAAK4B,MAAMX,OAAjB,CAAwBjB,KAAK4B,MAAMC,YAE1CpC,SAAS0C,kBAAkB,QAAQ,GAAG3B,MAAQ,0CAGjCE,GACb,IAAIS,EAAQnB,KAAK4B,MAAMX,MAAMmB,QAAQ1B,EAAMqB,OAAOvB,OAC9CW,GAAS,IACbnB,KAAK4B,MAAMX,MAAMoB,OAAOlB,EAAM,GAC9BnB,KAAK8B,SAAS,CACZb,MAAOjB,KAAK4B,MAAMX,0CAKb,IAAAqB,EAAAtC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CACbH,EAAAC,EAAAC,cAAA,KAAGoC,KAAK,IAAInC,UAAU,0CACpBH,EAAAC,EAAAC,cAAA,gCAKRF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,QAAMqC,SAAUxC,KAAKyC,cAAc3B,KAAKd,OACtCC,EAAAC,EAAAC,cAAA,SAAOM,SAAU,SAACC,GAAD,OAAW4B,EAAKI,eAAehC,IAAQb,KAAK,OAAOQ,KAAK,OAAOsC,UAAU,SAC1F1C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBP,KAAK,UAAzC,WAEFI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,gEAINF,EAAAC,EAAAC,cAACyC,EAAD,CAAU3B,MAAOjB,KAAK4B,MAAMX,MAAON,eAAgBX,KAAKW,eAAeG,KAAKd,gBA5DlEe,aCSE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAAS3D,SAAS4D,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d835c4a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass ToDo extends Component {\n  /* run through each checkbox and make sure it is unchecked */\n  unCheck() {\n    let checkboxes = document.getElementsByTagName('input');\n    for (var i=0; i<checkboxes.length; i++)  {\n      if (checkboxes[i].type === 'checkbox')   {\n      checkboxes[i].checked = false;\n      }\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"row\">\n        <div className='column'>\n          <div className=\"form-check\">       \n            <input \n              type=\"checkbox\" \n              name={this.props.task} \n              className=\"form-check-input\"\n              value={this.props.task} \n              onChange={(event) => this.props.onTaskComplete(event)}\n              onLoad={this.unCheck.bind(this)()}\n            />\n            <label className=\"form-check-label\">{this.props.task}</label>     \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ToDo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ToDo from './ToDo'\n\n\nclass ToDoList extends Component {\n  render() {\n    return (\n        <div className=\"container\">\n          {this.props.tasks.map((task, index) => <ToDo task={task} key={index} onTaskComplete={this.props.onTaskComplete} />)}\n        </div>\n    );\n  }\n}\n\nexport default ToDoList;\n","import React, { Component } from 'react';\nimport ToDoList from './ToDoList';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      newTodo: '',\n      tasks: []\n    }\n  }  \n  \n  onHandleChange(event) {\n    this.setState({\n      newTodo : event.target.value\n    })\n  }\n  \n  handleNewTodo(event) {\n    event.preventDefault();\n    this.setState({\n      tasks: [...this.state.tasks, this.state.newTodo]\n    })\n    document.getElementsByName('todo')[0].value = '';\n  }\n  \n  onTaskComplete(event) {\n    let index = this.state.tasks.indexOf(event.target.value);\n    if (index > -1) {\n    this.state.tasks.splice(index,1);\n    this.setState({\n      tasks: this.state.tasks\n    })      \n    } \n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"navbar navbar-dark bg-dark box-shadow\">\n            <div className=\"container d-flex justify-content-between\">\n              <a href=\"/\" className=\"navbar-brand d-flex align-items-center\">\n                <strong>To Do List</strong>\n              </a>              \n            </div>\n          </div>\n        </header>\n        <br />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <p>Use the input form to add TODOs.</p>\n              <form onSubmit={this.handleNewTodo.bind(this)}>\n                <input onChange={(event) => this.onHandleChange(event)} type='text' name='todo' autoFocus='true' /> \n                <button className='btn btn-primary' type='submit'>Submit</button>\n              </form>\n              <hr />\n              <h3>Pending Tasks</h3>\n              <p>Click on checkbox when completed to remove task.</p>\n            </div>\n          </div>\n        </div>\n        <ToDoList tasks={this.state.tasks} onTaskComplete={this.onTaskComplete.bind(this)} />          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}